# -*- coding: utf-8 -*-
"""Data Analyst Kak Mike

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1jEpXSOcHOgXStY3TzDFWxtkIrA8SJm

# Exploratory Data Analysis dan Visualisasi Waktu Pengiriman Makanan untuk Optimalisasi Layanan Food Delivery

## Tahap 1: Pemahaman Masalah & Problem Statement
"""

# Tahap 1: Pemahaman Masalah
# Problem Statement:
# Layanan food delivery sering mengalami keterlambatan pengiriman.
# Perlu diketahui faktor-faktor apa saja yang mempengaruhi waktu pengiriman,
# serta bagaimana pola dan tren pengiriman makanan agar operasional bisa dioptimalkan.
# Tujuan: melakukan exploratory data analysis (EDA) dan menyiapkan visualisasi (dashboard).

"""Interpretasi:
- Proyek ini berfokus pada **identifikasi faktor kunci keterlambatan pengiriman** agar perusahaan dapat melakukan perbaikan operasional.

## Tahap 2: Data Preprocessing

### Data
"""

import pandas as pd
# ====== Awal blok yang bisa langsung kamu tempelkan ke data_scientist.py ======
import streamlit as st
import pandas as pd
from pathlib import Path
import os
import logging

st.set_page_config(page_title="Data Scientist App", layout="wide")
logger = logging.getLogger(__name__)

st.title("Data loader (Excel) — Robust")

def try_read_excel(pathlike):
    """Coba baca path (Path atau string). Kembalikan DataFrame atau raise."""
    try:
        return pd.read_excel(pathlike)
    except Exception as e:
        # jangan crash di sini — biarkan pemanggil memutuskan
        raise

def load_dataframe_with_fallback(filename="final_customer_data.xlsx"):
    """Mencoba beberapa lokasi umum, lalu fallback ke uploader. Return df or None."""
    candidate_paths = [
        Path(__file__).resolve().parent / filename,  # di folder same file
        Path.cwd() / filename,                        # working dir
        Path("data") / filename,                      # data/ folder
        Path("/content") / filename,                  # COLAB path fallback only
        Path.home() / filename,                       # home dir
    ]

    # 1) cek kandidat lokal
    for p in candidate_paths:
        try:
            if p.exists():
                st.info(f"Membaca file dari: {p}")
                logger.info(f"Reading Excel from {p}")
                return try_read_excel(p)
        except Exception as e:
            st.warning(f"Gagal membaca {p}: {e}")
            logger.exception(f"Failed to read {p}")

    # 2) cek environment variable (opsional) — mis. path atau URL
    env_key = "FINAL_CUSTOMER_DATA_PATH"
    if env_key in os.environ:
        candidate = os.environ[env_key]
        st.info(f"Menemukan env var {env_key}; mencoba membaca {candidate}")
        try:
            return try_read_excel(candidate)
        except Exception as e:
            st.warning(f"Gagal membaca dari env var {env_key}: {e}")
            logger.exception("Failed to read from env var path")

    # 3) opsi: baca dari Google Drive shareable link (public) — user must supply direct download link
    # Jika Anda menaruh link shareable, convert link menjadi "export?format=xlsx" atau gunakan gdown.
    # Contoh (jika file bisa diakses publik): pd.read_excel("https://drive.google.com/uc?export=download&id=FILE_ID")

    # 4) fallback uploader (interaktif)
    st.error(f"File `{filename}` tidak ditemukan di server.")
    st.info("Letakkan file di repo (root atau folder `data/`) lalu redeploy, atau upload file Excel di bawah sebagai fallback.")
    uploaded = st.file_uploader("Upload file Excel (fallback)", type=["xlsx", "xls"])
    if uploaded is not None:
        try:
            df = pd.read_excel(uploaded)
            st.success("File Excel berhasil diupload dan dibaca.")
            return df
        except Exception as e:
            st.error(f"Gagal membaca file yang diupload: {e}")
            logger.exception("Failed to read uploaded file")

    # 5) debug info (bantu cari file saat deploy)
    try:
        st.write("Working directory:", Path.cwd())
        st.write("Isi folder saat ini (root):")
        st.write(os.listdir(Path.cwd()))
    except Exception as e:
        st.write("Tidak bisa list working dir:", e)
        logger.exception("Failed to list cwd")

    return None

# Panggil loader
df = load_dataframe_with_fallback("final_customer_data.xlsx")

if df is None:
    st.stop()  # hentikan app secara rapi — mencegah crash di bawahnya

# Jika df berhasil di-load, lanjutkan pipeline Anda di sini
st.write("Preview data:")
st.dataframe(df.head())

# Contoh: jika ingin menyimpan df di session_state agar tidak reload tiap interaksi
st.session_state.setdefault("df", df)
# ====== Akhir blok ======

# Load data
df = pd.read_csv("/content/Food_Delivery_Times.csv")
print("Data: ", df.head())

"""### Struktur Data"""

# Cek struktur data
print("Ukuran dataset:", df.shape)
print("Kolom dataset:", df.columns)
print("Tipe data dataset:", df.dtypes)

"""### Missing Value"""

# Cek missing values
print("Missing Values per Kolom:\n", df.isnull().sum())

# Isi missing values numerik dengan median
df.fillna(df.median(numeric_only=True), inplace=True)

"""### Duplikat"""

# Drop duplikat
print("Jumlah duplikat sebelum drop:", df.duplicated().sum())
df.drop_duplicates(inplace=True)
print("Jumlah duplikat setelah drop:", df.duplicated().sum())

# Pastikan data final sudah bersih
print("Ukuran dataset setelah preprocessing:", df.shape)

"""Interpretasi:
- Data sudah siap dianalisis tanpa bias karena missing value/duplikasi. Outlier pada waktu pengiriman tetap dipertahankan untuk dianalisis (karena relevan sebagai indikasi keterlambatan ekstrem).

## Tahap 3: Eksplorasi Data (EDA) Part 1

### Analisis Distribusi dan Pola Awal

#### Distribusi Delivery Time
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Distribusi Delivery Time
plt.figure(figsize=(8,5))
sns.histplot(df["Delivery_Time_min"], bins=30, kde=True, color="skyblue")
plt.title("Distribusi Delivery Time")
plt.xlabel("Delivery Time (minutes)")
plt.ylabel("Frekuensi")
plt.show()

"""### Delivery Time berdasarkan Traffic Level"""

# Boxplot: Traffic vs Delivery Time
plt.figure(figsize=(8,5))
sns.boxplot(x="Traffic_Level", y="Delivery_Time_min", data=df, palette="Set2")
plt.title("Delivery Time berdasarkan Traffic Level")
plt.show()

"""### Delivery Time berdasarkan Weather"""

# Boxplot: Weather vs Delivery Time
plt.figure(figsize=(8,5))
sns.boxplot(x="Weather", y="Delivery_Time_min", data=df, palette="Set3")
plt.title("Delivery Time berdasarkan Weather")
plt.show()

"""Interpretasi:
- Distribusi Delivery Time
  - Mayoritas waktu pengiriman berada pada 40 – 70 menit.
  - Ada ekor panjang ke kanan menunjukkan outlier (pengiriman sangat lama, >100 menit). Artinya sebagian besar pesanan normal, namun ada kasus keterlambatan signifikan yang perlu dianalisis.
- Delivery Time berdasarkan Traffic Level
  - Traffic Low, artinya median sekitar 50 menit.
  - Traffic Medium, artinya median lebih tinggi, variasi lebih besar.
  - Traffic High, artinya median meningkat lagi (60+ menit) dengan banyak outlier.
  - Kesimpulan: traffic padat berbanding lurus dengan keterlambatan pengiriman.
- Delivery Time berdasarkan Weather
  - Clear (cuaca cerah), artinya median paling rendah.
  - Windy, Foggy, Rainy artinya median naik ke 55–65 menit.
  - Snowy artinya paling tinggi, dengan distribusi waktu lebih lebar.
  - Kesimpulan: cuaca buruk (terutama snowy/rainy) memperlambat pengiriman.

## Tahap 3: Eksplorasi Data (EDA) Part 2

### Analisis Korelasi dan Hubungan Antar Variabel

#### Korelasi Antar Variabel Numerik
"""

# Korelasi antar variabel numerik
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap antar Variabel Numerik")
plt.show()

"""### Hubungan Distance dengan Delivery Time terhadap Warna Traffic"""

plt.figure(figsize=(8,5))
sns.scatterplot(x="Distance_km", y="Delivery_Time_min", hue="Traffic_Level", data=df)
plt.title("Hubungan Distance dengan Delivery Time terhadap Warna Traffic")
plt.show()

"""#### Hubungan Prep Time vs Delivery Time terhadap Weather"""

# Scatterplot: Prep Time vs Delivery Time
plt.figure(figsize=(8,5))
sns.scatterplot(x="Preparation_Time_min", y="Delivery_Time_min", hue="Weather", data=df)
plt.title("Hubungan Prep Time vs Delivery Time terhadap Weather")
plt.show()

"""Interpretasi:
- Korelasi antar Variabel Numerik
  - Distance_km - Delivery_Time_min korelasi positif kuat (0.78).
  - Preparation_Time_min - Delivery_Time_min korelasi sedang (0.31).
  - Courier_Experience_yrs - Delivery_Time_min korelasi negatif lemah (-0.09).
  - Kesimpulan: jarak tempuh adalah faktor paling berpengaruh, disusul oleh waktu persiapan restoran.
- Hubungan Distance dengan Delivery Time terhadap Traffic Level
  - Terlihat pola linear positif artinya semakin jauh jarak, semakin lama pengiriman.
  - Warna menunjukkan traffic: pada jarak sama, traffic High menghasilkan waktu antar lebih lama dibanding traffic Low/Medium.
  - Kesimpulan: Distance dan Traffic saling memperkuat keterlambatan.
- Hubungan Preparation Time dengan Delivery Time terhadap Weather
  - Ada tren positif artinya semakin lama prep time restoran, semakin lama total delivery.
  - Warna menunjukkan weather artinya saat Rainy/Snowy, delivery time lebih tinggi pada prep time yang sama.
  - Kesimpulan: prep time restoran + cuaca buruk memperlambat proses pengiriman.

## Insight
- Faktor terbesar keterlambatan: Traffic & Distance.
- Faktor tambahan signifikan: Preparation Time restoran.
- Faktor pendukung: Weather (cuaca buruk memperparah keterlambatan).
- Faktor kecil: Courier Experience tidak terlalu signifikan.

## Saran dan Rekomendasi
- Manajemen Traffic
  - Gunakan algoritma routing pintar agar kurir dapat memilih jalur tercepat.
  - Terapkan zona pengantaran atau biaya tambahan saat jam sibuk (dynamic pricing).
  - Prediksi lonjakan permintaan berdasarkan pola traffic harian dan musim liburan.
- Optimasi Jarak (Distance)
  - Rekomendasikan restoran terdekat secara otomatis kepada pelanggan.
  - Bangun cloud kitchen / dapur satelit di wilayah dengan demand tinggi untuk mengurangi jarak tempuh.
  - Lakukan clustering area pelanggan agar restoran partner bisa lebih strategis memilih lokasi.
- Waktu Persiapan Restoran
  - Buat SLA (Service Level Agreement) maksimal waktu persiapan (misalnya 15 menit).
  - Restoran dengan persiapan cepat diberi label khusus (“Quick Prep”) agar lebih diminati.
  - Gunakan sistem alert/notifikasi jika resto melebihi standar waktu.
- Kondisi Cuaca
  - Tambahkan estimasi waktu tambahan pada aplikasi saat hujan / badai.
  - Berikan insentif tambahan kepada kurir saat cuaca ekstrem agar tetap mau menerima order.
  - Sediakan peralatan pengiriman standar (raincoat, thermal bag) agar kualitas makanan tetap terjaga.
- Transparansi & Pengalaman Pelanggan
  - Tampilkan ETA real-time yang dinamis (mempertimbangkan traffic, cuaca, dan persiapan restoran).
  - Kirim notifikasi otomatis saat ada keterlambatan.
  - Berikan opsi kompensasi kecil (voucher / diskon) jika keterlambatan signifikan, untuk menjaga loyalitas.
"""
